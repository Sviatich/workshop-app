// cdekwidjet.js
document.addEventListener('DOMContentLoaded', () => {
  const openBtn = document.getElementById('open-cdek');
  if (!openBtn) return;

  const keyMeta = document.querySelector('meta[name="yandex-maps-api-key"]');
  const yaKey = keyMeta?.content?.trim();

  const FROM_CITY = 'Черноголовка';
  // Use numeric CDEK city code for sender to avoid encoding issues
  // 17 corresponds to Pushkino, Moscow region
  const FROM_CODE = 17;
  // Default destination city for the widget UI (Moskva)
  const DEFAULT_LOCATION = 'Москва';
  // Reasonable bounds for CDEK calculator
  const MIN_SIDE_MM = 100; // 10 cm min side
  const MAX_SIDE_MM = 1500; // 150 cm max side
  const MIN_WEIGHT_G = 100; // 0.1 kg min weight
  const LS_KEY = 'cdek:lastChoice';

  const ensureWidgetLib = () =>
    new Promise((resolve, reject) => {
      if (window.CDEKWidget) return resolve();
      const s = document.createElement('script');
      s.src = 'https://cdn.jsdelivr.net/npm/@cdek-it/widget@3';
      s.async = true;
      s.onload = () => resolve();
      s.onerror = () => reject(new Error('CDEK widget load error'));
      document.head.appendChild(s);
    });

  function calcParcels() {
    // Build parcels from cart items rather than using total volume cube.
    // This avoids a single huge parcel and produces more realistic quotes.
    let cart = [];
    try { cart = JSON.parse(localStorage.getItem('cart') || '[]') } catch (_) {}

    const MAX_PARCEL_WEIGHT_G = 25000; // 25 kg per parcel (safe for most tariffs)

    // Flatten units with per-unit weight and dims
    const units = [];
    for (const item of cart) {
      const tirage = Math.max(1, Number(item.tirage) || 1);
      const L = Math.min(MAX_SIDE_MM, Math.max(MIN_SIDE_MM, Math.round(Number(item.length) || 0)));
      const W = Math.min(MAX_SIDE_MM, Math.max(MIN_SIDE_MM, Math.round(Number(item.width) || 0)));
      const H = Math.min(MAX_SIDE_MM, Math.max(MIN_SIDE_MM, Math.round(Number(item.height) || 0)));
      // Weight per unit in kg -> g. Ensure sane min weight per unit.
      const totalItemWeightKg = Math.max(0, Number(item.weight) || 0);
      const unitWeightG = Math.max(MIN_WEIGHT_G, Math.round((totalItemWeightKg / tirage) * 1000));

      for (let i = 0; i < tirage; i++) {
        units.push({ L, W, H, g: unitWeightG });
      }
    }

    // Greedy pack units by weight limit. Keep dims as the max of included units.
    const parcels = [];
    let current = null;
    for (const u of units) {
      if (!current) {
        current = { length: u.L, width: u.W, height: u.H, weight: 0 };
      }
      if (current.weight + u.g > MAX_PARCEL_WEIGHT_G) {
        // close current and start new
        if (current.weight > 0) parcels.push(current);
        current = { length: u.L, width: u.W, height: u.H, weight: 0 };
      }
      current.length = Math.max(current.length, u.L);
      current.width  = Math.max(current.width,  u.W);
      current.height = Math.max(current.height, u.H);
      current.weight += u.g;
    }
    if (current && current.weight > 0) parcels.push(current);

    // Fallback: if cart empty or packing failed, return a small minimal parcel
    if (!parcels.length) {
      return [{ length: MIN_SIDE_MM, width: MIN_SIDE_MM, height: MIN_SIDE_MM, weight: MIN_WEIGHT_G }];
    }
    return parcels;
  }
